{"ast":null,"code":"import { mockEvents } from './mockData';\nconst mockFirebase = {\n  auth: {\n    currentUser: null,\n    signInWithEmailAndPassword: async (email, password) => {\n      // Mock auth - in real app use Firebase Auth\n      const user = {\n        uid: '123',\n        email,\n        displayName: email.split('@')[0]\n      };\n      mockFirebase.auth.currentUser = user;\n      return {\n        user\n      };\n    },\n    signOut: async () => {\n      mockFirebase.auth.currentUser = null;\n    }\n  },\n  firestore: {\n    collection: name => ({\n      get: async () => {\n        if (name === 'events') {\n          return {\n            docs: mockEvents.map(event => ({\n              id: event.id,\n              data: () => event\n            }))\n          };\n        }\n        return {\n          docs: []\n        };\n      },\n      doc: id => ({\n        get: async () => ({\n          exists: true,\n          data: () => mockEvents.find(e => e.id === id)\n        }),\n        update: async data => {\n          const eventIndex = mockEvents.findIndex(e => e.id === id);\n          if (eventIndex !== -1) {\n            mockEvents[eventIndex] = {\n              ...mockEvents[eventIndex],\n              ...data\n            };\n          }\n        },\n        delete: async () => {\n          const eventIndex = mockEvents.findIndex(e => e.id === id);\n          if (eventIndex !== -1) {\n            mockEvents.splice(eventIndex, 1);\n          }\n        }\n      }),\n      add: async data => {\n        const newEvent = {\n          ...data,\n          id: Date.now().toString()\n        };\n        mockEvents.push(newEvent);\n        return {\n          id: newEvent.id\n        };\n      }\n    })\n  }\n};\nexport const firebase = {\n  auth: mockFirebase.auth,\n  firestore: mockFirebase.firestore\n};","map":{"version":3,"names":["mockEvents","mockFirebase","auth","currentUser","signInWithEmailAndPassword","email","password","user","uid","displayName","split","signOut","firestore","collection","name","get","docs","map","event","id","data","doc","exists","find","e","update","eventIndex","findIndex","delete","splice","add","newEvent","Date","now","toString","push","firebase"],"sources":["C:/Users/kesha/Desktop/stu/src/services/firebase.js"],"sourcesContent":["import { mockEvents } from './mockData';\r\n\r\nconst mockFirebase = {\r\n  auth: {\r\n    currentUser: null,\r\n    signInWithEmailAndPassword: async (email, password) => {\r\n      // Mock auth - in real app use Firebase Auth\r\n      const user = { uid: '123', email, displayName: email.split('@')[0] };\r\n      mockFirebase.auth.currentUser = user;\r\n      return { user };\r\n    },\r\n    signOut: async () => {\r\n      mockFirebase.auth.currentUser = null;\r\n    }\r\n  },\r\n  firestore: {\r\n    collection: (name) => ({\r\n      get: async () => {\r\n        if (name === 'events') {\r\n          return {\r\n            docs: mockEvents.map(event => ({\r\n              id: event.id,\r\n              data: () => event\r\n            }))\r\n          };\r\n        }\r\n        return { docs: [] };\r\n      },\r\n      doc: (id) => ({\r\n        get: async () => ({\r\n          exists: true,\r\n          data: () => mockEvents.find(e => e.id === id)\r\n        }),\r\n        update: async (data) => {\r\n          const eventIndex = mockEvents.findIndex(e => e.id === id);\r\n          if (eventIndex !== -1) {\r\n            mockEvents[eventIndex] = { ...mockEvents[eventIndex], ...data };\r\n          }\r\n        },\r\n        delete: async () => {\r\n          const eventIndex = mockEvents.findIndex(e => e.id === id);\r\n          if (eventIndex !== -1) {\r\n            mockEvents.splice(eventIndex, 1);\r\n          }\r\n        }\r\n      }),\r\n      add: async (data) => {\r\n        const newEvent = { ...data, id: Date.now().toString() };\r\n        mockEvents.push(newEvent);\r\n        return { id: newEvent.id };\r\n      }\r\n    })\r\n  }\r\n};\r\n\r\nexport const firebase = {\r\n  auth: mockFirebase.auth,\r\n  firestore: mockFirebase.firestore\r\n};"],"mappings":"AAAA,SAASA,UAAU,QAAQ,YAAY;AAEvC,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE;IACJC,WAAW,EAAE,IAAI;IACjBC,0BAA0B,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;MACrD;MACA,MAAMC,IAAI,GAAG;QAAEC,GAAG,EAAE,KAAK;QAAEH,KAAK;QAAEI,WAAW,EAAEJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MAAE,CAAC;MACpET,YAAY,CAACC,IAAI,CAACC,WAAW,GAAGI,IAAI;MACpC,OAAO;QAAEA;MAAK,CAAC;IACjB,CAAC;IACDI,OAAO,EAAE,MAAAA,CAAA,KAAY;MACnBV,YAAY,CAACC,IAAI,CAACC,WAAW,GAAG,IAAI;IACtC;EACF,CAAC;EACDS,SAAS,EAAE;IACTC,UAAU,EAAGC,IAAI,KAAM;MACrBC,GAAG,EAAE,MAAAA,CAAA,KAAY;QACf,IAAID,IAAI,KAAK,QAAQ,EAAE;UACrB,OAAO;YACLE,IAAI,EAAEhB,UAAU,CAACiB,GAAG,CAACC,KAAK,KAAK;cAC7BC,EAAE,EAAED,KAAK,CAACC,EAAE;cACZC,IAAI,EAAEA,CAAA,KAAMF;YACd,CAAC,CAAC;UACJ,CAAC;QACH;QACA,OAAO;UAAEF,IAAI,EAAE;QAAG,CAAC;MACrB,CAAC;MACDK,GAAG,EAAGF,EAAE,KAAM;QACZJ,GAAG,EAAE,MAAAA,CAAA,MAAa;UAChBO,MAAM,EAAE,IAAI;UACZF,IAAI,EAAEA,CAAA,KAAMpB,UAAU,CAACuB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKA,EAAE;QAC9C,CAAC,CAAC;QACFM,MAAM,EAAE,MAAOL,IAAI,IAAK;UACtB,MAAMM,UAAU,GAAG1B,UAAU,CAAC2B,SAAS,CAACH,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;UACzD,IAAIO,UAAU,KAAK,CAAC,CAAC,EAAE;YACrB1B,UAAU,CAAC0B,UAAU,CAAC,GAAG;cAAE,GAAG1B,UAAU,CAAC0B,UAAU,CAAC;cAAE,GAAGN;YAAK,CAAC;UACjE;QACF,CAAC;QACDQ,MAAM,EAAE,MAAAA,CAAA,KAAY;UAClB,MAAMF,UAAU,GAAG1B,UAAU,CAAC2B,SAAS,CAACH,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKA,EAAE,CAAC;UACzD,IAAIO,UAAU,KAAK,CAAC,CAAC,EAAE;YACrB1B,UAAU,CAAC6B,MAAM,CAACH,UAAU,EAAE,CAAC,CAAC;UAClC;QACF;MACF,CAAC,CAAC;MACFI,GAAG,EAAE,MAAOV,IAAI,IAAK;QACnB,MAAMW,QAAQ,GAAG;UAAE,GAAGX,IAAI;UAAED,EAAE,EAAEa,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;QAAE,CAAC;QACvDlC,UAAU,CAACmC,IAAI,CAACJ,QAAQ,CAAC;QACzB,OAAO;UAAEZ,EAAE,EAAEY,QAAQ,CAACZ;QAAG,CAAC;MAC5B;IACF,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMiB,QAAQ,GAAG;EACtBlC,IAAI,EAAED,YAAY,CAACC,IAAI;EACvBU,SAAS,EAAEX,YAAY,CAACW;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}