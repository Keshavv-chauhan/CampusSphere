{"ast":null,"code":"// src/services/gemini.jsAIzaSyDHrfJCcqqvlZkmNR2WT3-A0flqsOVcmNs\n// src/services/gemini.js\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your actual API key\nconst GEMINI_ENDPOINT = \"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\";\nexport const gemini = {\n  generateContent: async prompt => {\n    const response = await fetch(`${GEMINI_ENDPOINT}?key=${API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }]\n      })\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Gemini API Error: ${errorText}`);\n    }\n    const data = await response.json();\n    return {\n      response: {\n        text: () => {\n          var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n          return ((_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"No response from Gemini.\";\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["API_KEY","GEMINI_ENDPOINT","gemini","generateContent","prompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","ok","errorText","Error","data","json","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","candidates","content"],"sources":["C:/Users/kesha/Desktop/stu/src/services/gemini.js"],"sourcesContent":["// src/services/gemini.jsAIzaSyDHrfJCcqqvlZkmNR2WT3-A0flqsOVcmNs\r\n// src/services/gemini.js\r\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your actual API key\r\nconst GEMINI_ENDPOINT = \"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\";\r\n\r\nexport const gemini = {\r\n  generateContent: async (prompt) => {\r\n    const response = await fetch(`${GEMINI_ENDPOINT}?key=${API_KEY}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [\r\n          {\r\n            parts: [{ text: prompt }]\r\n          }\r\n        ]\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Gemini API Error: ${errorText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return {\r\n      response: {\r\n        text: () => data.candidates?.[0]?.content?.parts?.[0]?.text || \"No response from Gemini.\"\r\n      }\r\n    };\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA;AACA,MAAMA,OAAO,GAAG,cAAc,CAAC,CAAC;AAChC,MAAMC,eAAe,GAAG,gFAAgF;AAExG,OAAO,MAAMC,MAAM,GAAG;EACpBC,eAAe,EAAE,MAAOC,MAAM,IAAK;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,eAAe,QAAQD,OAAO,EAAE,EAAE;MAChEO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,CAAC;YAAEC,IAAI,EAAEV;UAAO,CAAC;QAC1B,CAAC;MAEL,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIG,KAAK,CAAC,qBAAqBD,SAAS,EAAE,CAAC;IACnD;IAEA,MAAME,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;IAClC,OAAO;MACLd,QAAQ,EAAE;QACRS,IAAI,EAAEA,CAAA;UAAA,IAAAM,gBAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;UAAA,OAAM,EAAAJ,gBAAA,GAAAF,IAAI,CAACO,UAAU,cAAAL,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,wBAAAC,qBAAA,GAApBD,iBAAA,CAAsBK,OAAO,cAAAJ,qBAAA,wBAAAC,sBAAA,GAA7BD,qBAAA,CAA+BT,KAAK,cAAAU,sBAAA,wBAAAC,sBAAA,GAApCD,sBAAA,CAAuC,CAAC,CAAC,cAAAC,sBAAA,uBAAzCA,sBAAA,CAA2CV,IAAI,KAAI,0BAA0B;QAAA;MAC3F;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}