{"ast":null,"code":"// src/components/GeminiChatbot.js\nimport React,{useState,useRef,useEffect}from'react';import{Cpu,Send}from'react-feather';import{gemini}from'../services/gemini';import'./GeminiChatbot.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GeminiChatbot=()=>{const[messages,setMessages]=useState([{role:'assistant',content:\"Hi! I'm your AI assistant for campus events. Ask me about any event, why you should attend, or how to make the most of them!\"}]);const[input,setInput]=useState('');const[isLoading,setIsLoading]=useState(false);const messageEndRef=useRef(null);const scrollToBottom=()=>{var _messageEndRef$curren;(_messageEndRef$curren=messageEndRef.current)===null||_messageEndRef$curren===void 0?void 0:_messageEndRef$curren.scrollIntoView({behavior:'smooth'});};useEffect(()=>{scrollToBottom();},[messages]);const sendMessage=async()=>{if(!input.trim())return;const userMessage=input.trim();setInput('');setMessages(prev=>[...prev,{role:'user',content:userMessage}]);setIsLoading(true);try{const response=await gemini.generateContent(userMessage);const botResponse=await response.response.text();setMessages(prev=>[...prev,{role:'assistant',content:botResponse}]);}catch(error){console.error('Gemini Error:',error);setMessages(prev=>[...prev,{role:'assistant',content:'Sorry, I encountered an error. Please try again.'}]);}finally{setIsLoading(false);}};const handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();sendMessage();}};return/*#__PURE__*/_jsx(\"div\",{className:\"chatbot-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-header\",children:[/*#__PURE__*/_jsx(Cpu,{size:20}),/*#__PURE__*/_jsx(\"h2\",{children:\"AI Event Assistant\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-messages\",children:[messages.map((message,index)=>/*#__PURE__*/_jsx(\"div\",{className:`chatbot-message ${message.role==='user'?'user-message':'assistant-message'}`,children:message.content},index)),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"assistant-message chatbot-message\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-loader\",children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"div\",{})]})}),/*#__PURE__*/_jsx(\"div\",{ref:messageEndRef})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chatbot-input-area\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-input-box\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:input,onChange:e=>setInput(e.target.value),onKeyPress:handleKeyPress,placeholder:\"Ask me about campus events...\",className:\"chatbot-input\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,disabled:isLoading,className:\"chatbot-send-btn\",children:/*#__PURE__*/_jsx(Send,{size:16})})]})})]})});};export default GeminiChatbot;","map":{"version":3,"names":["React","useState","useRef","useEffect","Cpu","Send","gemini","jsx","_jsx","jsxs","_jsxs","GeminiChatbot","messages","setMessages","role","content","input","setInput","isLoading","setIsLoading","messageEndRef","scrollToBottom","_messageEndRef$curren","current","scrollIntoView","behavior","sendMessage","trim","userMessage","prev","response","generateContent","botResponse","text","error","console","handleKeyPress","e","key","shiftKey","preventDefault","className","children","size","map","message","index","ref","type","value","onChange","target","onKeyPress","placeholder","onClick","disabled"],"sources":["C:/Users/kesha/Desktop/stu/src/components/GeminiChatbot.js"],"sourcesContent":["// src/components/GeminiChatbot.js\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Cpu, Send } from 'react-feather';\r\nimport { gemini } from '../services/gemini';\r\nimport './GeminiChatbot.css';\r\n\r\nconst GeminiChatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      role: 'assistant',\r\n      content: \"Hi! I'm your AI assistant for campus events. Ask me about any event, why you should attend, or how to make the most of them!\",\r\n    },\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messageEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = input.trim();\r\n    setInput('');\r\n    setMessages((prev) => [...prev, { role: 'user', content: userMessage }]);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await gemini.generateContent(userMessage);\r\n      const botResponse = await response.response.text();\r\n      setMessages((prev) => [...prev, { role: 'assistant', content: botResponse }]);\r\n    } catch (error) {\r\n      console.error('Gemini Error:', error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { role: 'assistant', content: 'Sorry, I encountered an error. Please try again.' },\r\n      ]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-card\">\r\n        <div className=\"chatbot-header\">\r\n          <Cpu size={20} />\r\n          <h2>AI Event Assistant</h2>\r\n        </div>\r\n\r\n        <div className=\"chatbot-messages\">\r\n          {messages.map((message, index) => (\r\n            <div\r\n              key={index}\r\n              className={`chatbot-message ${\r\n                message.role === 'user' ? 'user-message' : 'assistant-message'\r\n              }`}\r\n            >\r\n              {message.content}\r\n            </div>\r\n          ))}\r\n\r\n          {isLoading && (\r\n            <div className=\"assistant-message chatbot-message\">\r\n              <div className=\"chatbot-loader\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div ref={messageEndRef} />\r\n        </div>\r\n\r\n        <div className=\"chatbot-input-area\">\r\n          <div className=\"chatbot-input-box\">\r\n            <input\r\n              type=\"text\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              placeholder=\"Ask me about campus events...\"\r\n              className=\"chatbot-input\"\r\n            />\r\n            <button\r\n              onClick={sendMessage}\r\n              disabled={isLoading}\r\n              className=\"chatbot-send-btn\"\r\n            >\r\n              <Send size={16} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeminiChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}